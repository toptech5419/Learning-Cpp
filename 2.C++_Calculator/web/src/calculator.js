/**
 * Advanced C++ Calculator - Web Edition
 * JavaScript Integration Layer with WebAssembly Ready Architecture
 * 
 * This file provides the complete web interface with JavaScript engine
 * and WebAssembly integration capability for future enhancement
 */

class WebCalculator {
    constructor() {
        this.engine = null;
        this.display = document.getElementById('display');
        this.statusBar = document.getElementById('status-bar');
        
        // Calculator state
        this.currentInput = '0';
        this.previousInput = null;
        this.operation = null;
        this.waitingForOperand = false;
        this.lastResult = 0;
        
        // UI state
        this.isDegreesMode = true;
        this.hasMemory = false;
        
        this.initializeUI();
    }
    
    async initializeEngine() {
        try {
            // Show loading screen
            document.getElementById('loading').style.display = 'flex';
            document.getElementById('app').style.display = 'none';
            
            // Load WebAssembly module (placeholder for now - will be generated by Emscripten)
            // const Module = await import('./calculator_wasm.js');
            // this.wasmModule = await Module.default();
            // this.engine = new this.wasmModule.WebCalculatorEngine();
            
            // For now, create a JavaScript fallback that mimics the C++ interface
            this.engine = new JavaScriptCalculatorEngine();
            
            // Hide loading screen and show app
            document.getElementById('loading').style.display = 'none';
            document.getElementById('app').style.display = 'block';
            
            this.updateDisplay();
            this.updateStatusBar();
            
            console.log('Calculator engine initialized successfully');
            
        } catch (error) {
            console.error('Failed to initialize calculator engine:', error);
            this.showError('Failed to load calculator engine. Please refresh the page.');
        }
    }
    
    initializeUI() {
        // Number buttons
        for (let i = 0; i <= 9; i++) {
            const button = document.getElementById(`btn-${i}`);
            if (button) {
                button.addEventListener('click', () => this.onNumberClick(i.toString()));
            }
        }
        
        // Operation buttons
        const operations = {
            'btn-add': '+',
            'btn-subtract': '-',
            'btn-multiply': '*',
            'btn-divide': '/'
        };
        
        Object.entries(operations).forEach(([id, op]) => {
            const button = document.getElementById(id);
            if (button) {
                button.addEventListener('click', () => this.onOperationClick(op));
            }
        });
        
        // Special buttons
        document.getElementById('btn-equals')?.addEventListener('click', () => this.onEqualsClick());
        document.getElementById('btn-decimal')?.addEventListener('click', () => this.onDecimalClick());
        document.getElementById('btn-c')?.addEventListener('click', () => this.onClearClick());
        document.getElementById('btn-ce')?.addEventListener('click', () => this.onClearEntryClick());
        
        // Memory buttons
        document.getElementById('btn-ms')?.addEventListener('click', () => this.onMemoryStore());
        document.getElementById('btn-mr')?.addEventListener('click', () => this.onMemoryRecall());
        document.getElementById('btn-mc')?.addEventListener('click', () => this.onMemoryClear());
        document.getElementById('btn-m-status')?.addEventListener('click', () => this.onMemoryStatus());
        
        // Trigonometric buttons
        const trigFunctions = {
            'btn-sin': 'sine',
            'btn-cos': 'cosine',
            'btn-tan': 'tangent',
            'btn-asin': 'arcsine',
            'btn-acos': 'arccosine',
            'btn-atan': 'arctangent'
        };
        
        Object.entries(trigFunctions).forEach(([id, func]) => {
            const button = document.getElementById(id);
            if (button) {
                button.addEventListener('click', () => this.onTrigFunctionClick(func));
            }
        });
        
        // Mode toggle
        document.getElementById('btn-deg-rad')?.addEventListener('click', () => this.onModeToggle());
        
        // Keyboard support
        document.addEventListener('keydown', (e) => this.onKeyDown(e));
        
        // Error retry button
        document.getElementById('retry-btn')?.addEventListener('click', () => {
            document.getElementById('error-display').style.display = 'none';
            this.initializeEngine();
        });
    }
    
    // Calculator Operations
    onNumberClick(number) {
        if (this.waitingForOperand) {
            this.currentInput = number;
            this.waitingForOperand = false;
        } else {
            this.currentInput = this.currentInput === '0' ? number : this.currentInput + number;
        }
        this.updateDisplay();
    }
    
    onDecimalClick() {
        if (this.waitingForOperand) {
            this.currentInput = '0.';
            this.waitingForOperand = false;
        } else if (this.currentInput.indexOf('.') === -1) {
            this.currentInput += '.';
        }
        this.updateDisplay();
    }
    
    onOperationClick(nextOperation) {
        const inputValue = parseFloat(this.currentInput);
        
        if (this.previousInput === null) {
            this.previousInput = inputValue;
        } else if (this.operation) {
            const currentValue = this.previousInput || 0;
            const newValue = this.performCalculation(this.operation, currentValue, inputValue);
            
            this.currentInput = String(newValue);
            this.previousInput = newValue;
            this.updateDisplay();
        }
        
        this.waitingForOperand = true;
        this.operation = nextOperation;
    }
    
    onEqualsClick() {
        const inputValue = parseFloat(this.currentInput);
        
        if (this.previousInput !== null && this.operation) {
            const newValue = this.performCalculation(this.operation, this.previousInput, inputValue);
            this.currentInput = String(newValue);
            this.lastResult = newValue;
            this.previousInput = null;
            this.operation = null;
            this.waitingForOperand = true;
            this.updateDisplay();
        }
    }
    
    onClearClick() {
        this.currentInput = '0';
        this.previousInput = null;
        this.operation = null;
        this.waitingForOperand = false;
        this.updateDisplay();
    }
    
    onClearEntryClick() {
        this.currentInput = '0';
        this.updateDisplay();
    }
    
    // Memory Operations
    onMemoryStore() {
        const value = parseFloat(this.currentInput);
        if (this.engine) {
            this.engine.storeInMemory(value);
            this.hasMemory = true;
            this.updateStatusBar();
            this.showToast(`Stored ${value} in memory`);
        }
    }
    
    onMemoryRecall() {
        if (this.engine) {
            const value = this.engine.recallFromMemory();
            this.currentInput = String(value);
            this.waitingForOperand = true;
            this.updateDisplay();
            this.showToast(`Recalled ${value} from memory`);
        }
    }
    
    onMemoryClear() {
        if (this.engine) {
            this.engine.clearMemory();
            this.hasMemory = false;
            this.updateStatusBar();
            this.showToast('Memory cleared');
        }
    }
    
    onMemoryStatus() {
        if (this.engine) {
            const hasValue = this.engine.hasMemoryValue();
            const message = hasValue ? 'Memory contains a value' : 'Memory is empty';
            this.showToast(message);
        }
    }
    
    // Trigonometric Operations
    onTrigFunctionClick(functionName) {
        const inputValue = parseFloat(this.currentInput);
        let result;
        
        try {
            switch (functionName) {
                case 'sine':
                    result = this.engine.sine(inputValue);
                    break;
                case 'cosine':
                    result = this.engine.cosine(inputValue);
                    break;
                case 'tangent':
                    result = this.engine.tangent(inputValue);
                    break;
                case 'arcsine':
                    if (inputValue < -1 || inputValue > 1) {
                        this.showToast('Domain error: Input must be between -1 and 1');
                        return;
                    }
                    result = this.engine.arcsine(inputValue);
                    break;
                case 'arccosine':
                    if (inputValue < -1 || inputValue > 1) {
                        this.showToast('Domain error: Input must be between -1 and 1');
                        return;
                    }
                    result = this.engine.arccosine(inputValue);
                    break;
                case 'arctangent':
                    result = this.engine.arctangent(inputValue);
                    break;
                default:
                    throw new Error('Unknown trigonometric function');
            }
            
            this.currentInput = String(result);
            this.lastResult = result;
            this.waitingForOperand = true;
            this.updateDisplay();
            
        } catch (error) {
            console.error('Trigonometric calculation error:', error);
            this.showToast('Calculation error');
        }
    }
    
    onModeToggle() {
        this.isDegreesMode = !this.isDegreesMode;
        if (this.engine) {
            this.engine.setAngleMode(this.isDegreesMode);
        }
        
        const button = document.getElementById('btn-deg-rad');
        button.textContent = this.isDegreesMode ? 'DEG' : 'RAD';
        this.updateStatusBar();
        this.showToast(`Switched to ${this.isDegreesMode ? 'Degrees' : 'Radians'} mode`);
    }
    
    // Core calculation method
    performCalculation(operation, firstValue, secondValue) {
        if (!this.engine) {
            // Fallback to JavaScript calculation
            switch (operation) {
                case '+': return firstValue + secondValue;
                case '-': return firstValue - secondValue;
                case '*': return firstValue * secondValue;
                case '/': 
                    if (secondValue === 0) {
                        this.showToast('Cannot divide by zero');
                        return firstValue;
                    }
                    return firstValue / secondValue;
                default: return secondValue;
            }
        }
        
        // Use WebAssembly engine
        switch (operation) {
            case '+': return this.engine.add(firstValue, secondValue);
            case '-': return this.engine.subtract(firstValue, secondValue);
            case '*': return this.engine.multiply(firstValue, secondValue);
            case '/': return this.engine.divide(firstValue, secondValue);
            default: return secondValue;
        }
    }
    
    // UI Updates
    updateDisplay() {
        // Format number for display
        let displayValue = this.currentInput;
        
        // Handle very long numbers
        if (displayValue.length > 12) {
            const num = parseFloat(displayValue);
            displayValue = num.toExponential(6);
        }
        
        this.display.textContent = displayValue;
    }
    
    updateStatusBar() {
        const memoryStatus = this.hasMemory ? 'Has Value' : 'Empty';
        const angleMode = this.isDegreesMode ? 'Degrees' : 'Radians';
        this.statusBar.textContent = `Ready | Memory: ${memoryStatus} | Mode: ${angleMode}`;
    }
    
    // Keyboard Support
    onKeyDown(event) {
        const key = event.key;
        
        // Prevent default for calculator keys
        if (/[0-9+\-*/.=]/.test(key) || key === 'Enter' || key === 'Escape') {
            event.preventDefault();
        }
        
        // Number keys
        if (/[0-9]/.test(key)) {
            this.onNumberClick(key);
        }
        // Operation keys
        else if (key === '+') this.onOperationClick('+');
        else if (key === '-') this.onOperationClick('-');
        else if (key === '*') this.onOperationClick('*');
        else if (key === '/') this.onOperationClick('/');
        else if (key === '.' || key === ',') this.onDecimalClick();
        else if (key === 'Enter' || key === '=') this.onEqualsClick();
        else if (key === 'Escape') this.onClearClick();
        else if (key === 'Backspace') this.onClearEntryClick();
    }
    
    // Utility Methods
    showToast(message) {
        // Simple toast notification
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #3daee9;
            color: white;
            padding: 12px 20px;
            border-radius: 5px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => document.body.removeChild(toast), 300);
        }, 2000);
    }
    
    showError(message) {
        document.getElementById('error-message').textContent = message;
        document.getElementById('error-display').style.display = 'flex';
    }
}

// JavaScript fallback engine (until WebAssembly is compiled)
class JavaScriptCalculatorEngine {
    constructor() {
        this.memoryValue = 0;
        this.hasMemoryValue = false;
        this.isDegreesMode = true;
    }
    
    // Basic operations
    add(a, b) { return a + b; }
    subtract(a, b) { return a - b; }
    multiply(a, b) { return a * b; }
    divide(a, b) { 
        if (b === 0) throw new Error('Division by zero');
        return a / b; 
    }
    
    // Trigonometric operations
    sine(angle) {
        const radians = this.isDegreesMode ? angle * Math.PI / 180 : angle;
        return Math.sin(radians);
    }
    
    cosine(angle) {
        const radians = this.isDegreesMode ? angle * Math.PI / 180 : angle;
        return Math.cos(radians);
    }
    
    tangent(angle) {
        const radians = this.isDegreesMode ? angle * Math.PI / 180 : angle;
        return Math.tan(radians);
    }
    
    arcsine(value) {
        const result = Math.asin(value);
        return this.isDegreesMode ? result * 180 / Math.PI : result;
    }
    
    arccosine(value) {
        const result = Math.acos(value);
        return this.isDegreesMode ? result * 180 / Math.PI : result;
    }
    
    arctangent(value) {
        const result = Math.atan(value);
        return this.isDegreesMode ? result * 180 / Math.PI : result;
    }
    
    // Memory operations
    storeInMemory(value) {
        this.memoryValue = value;
        this.hasMemoryValue = true;
    }
    
    recallFromMemory() {
        return this.memoryValue;
    }
    
    clearMemory() {
        this.memoryValue = 0;
        this.hasMemoryValue = false;
    }
    
    hasMemoryValue() {
        return this.hasMemoryValue;
    }
    
    setAngleMode(degrees) {
        this.isDegreesMode = degrees;
    }
    
    getAngleMode() {
        return this.isDegreesMode;
    }
}

// Add CSS animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// Initialize calculator when page loads
document.addEventListener('DOMContentLoaded', () => {
    const calculator = new WebCalculator();
    calculator.initializeEngine();
});

// Export for potential module use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { WebCalculator, JavaScriptCalculatorEngine };
}